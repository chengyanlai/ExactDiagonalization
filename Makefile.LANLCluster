OPENMP = -qopenmp
CXXCOMP = icpc
# NOTE: the order of linker matters!
HDF5LIB = $(HDF5HOME)/lib/libhdf5_cpp.a $(HDF5HOME)/lib/libhdf5.a $(HDF5HOME)/lib/libz.a
EIGENHOME = ./eigen
LAPACK = -L$(MKLROOT)/lib/intel64 -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_rt -lmkl_core -liomp5 -lpthread -L$(ARPACKHOME) -larpack
CC = $(CXXCOMP) $(OPENMP) -O3 -Wall -std=c++11 -I$(EIGENHOME) -I$(HDF5HOME)/include -DHDF5
MPICC = mpiicpc $(OPENMP) -O3 -Wall -std=c++11 -I$(EIGENHOME) -I$(HDF5HOME)/include -DHDF5

MODULES   := Node Lattice Basis Hamiltonian Lanczos hdf5io numeric
SRC_DIR   := $(addprefix src/,$(MODULES))
SRC       := $(foreach sdir,$(SRC_DIR),$(wildcard $(sdir)/*.cpp))
OBJ       := $(patsubst src/%.cpp,build/%.o,$(SRC))

TB_MODULES   := Lindblad-TB
TB_SRC_DIR   := $(addprefix src/,$(MODULES) $(TB_MODULES))
TB_SRC       := $(foreach sdir,$(TB_SRC_DIR),$(wildcard $(sdir)/*.cpp))
TB_OBJ       := $(patsubst src/%.cpp,build/%.o,$(TB_SRC))

DP_MODULES   := Lindblad-DP
DP_SRC_DIR   := $(addprefix src/,$(MODULES) $(DP_MODULES))
DP_SRC       := $(foreach sdir,$(DP_SRC_DIR),$(wildcard $(sdir)/*.cpp))
DP_OBJ       := $(patsubst src/%.cpp,build/%.o,$(DP_SRC))

OP_MODULES   := Lindblad-OP
OP_SRC_DIR   := $(addprefix src/,$(MODULES) $(OP_MODULES))
OP_SRC       := $(foreach sdir,$(OP_SRC_DIR),$(wildcard $(sdir)/*.cpp))
OP_OBJ       := $(patsubst src/%.cpp,build/%.o,$(OP_SRC))

SS_MODULES   := Lindblad-SS
SS_SRC_DIR   := $(addprefix src/,$(MODULES) $(SS_MODULES))
SS_SRC       := $(foreach sdir,$(SS_SRC_DIR),$(wildcard $(sdir)/*.cpp))
SS_OBJ       := $(patsubst src/%.cpp,build/%.o,$(SS_SRC))

PE_MODULES   := Lindblad-PE
PE_SRC_DIR   := $(addprefix src/,$(MODULES) $(PE_MODULES))
PE_SRC       := $(foreach sdir,$(PE_SRC_DIR),$(wildcard $(sdir)/*.cpp))
PE_OBJ       := $(patsubst src/%.cpp,build/%.o,$(PE_SRC))

BUILD_DIR := $(addprefix build/,$(MODULES) $(PE_MODULES) $(TB_MODULES) $(DP_MODULES) $(OP_MODULES) $(SS_MODULES) apps)

# INCLUDES  := $(addprefix -I,$(SRC_DIR))
INCLUDES  := -I./

vpath %.cpp $(SRC_DIR)
vpath %.cpp $(TB_SRC_DIR)
vpath %.cpp $(PE_SRC_DIR)
vpath %.cpp $(DP_SRC_DIR)
vpath %.cpp $(OP_SRC_DIR)
vpath %.cpp $(SS_SRC_DIR)
vpath %.cpp apps/

define make-goal
$1/%.o: %.cpp
	$(CC) $(INCLUDES) -c $$< -o $$@
endef

.PHONY: all checkdirs clean

all: checkdirs build/plex build/plex.mpi

build/apps/%.o: apps/%.cpp
	$(CC) $(INCLUDES) -c $< -o $@

build/1D.b: build/apps/1D_boson.o $(OBJ)
	$(CC) $^ -o $@ $(LAPACK) $(HDF5LIB)

build/SSH.b: build/apps/SSH_boson.o $(OBJ)
	$(CC) $^ -o $@ $(LAPACK) $(HDF5LIB)

build/SSH.f: build/apps/SSH_fermion.o $(OBJ)
	$(CC) $^ -o $@ $(LAPACK) $(HDF5LIB)

build/TBLB.b: build/apps/TBLB_boson.o $(TB_OBJ)
	$(CC) $^ -o $@ $(LAPACK) $(HDF5LIB)

build/ST.b: build/apps/ST_boson.o $(TB_OBJ)
	$(CC) $^ -o $@ $(LAPACK) $(HDF5LIB)

build/STTB.b: build/apps/STTB_boson.o $(TB_OBJ)
	$(CC) $^ -o $@ $(LAPACK) $(HDF5LIB)

build/SSWF.b: build/apps/SSWF_boson.o $(OBJ)
	$(CC) $^ -o $@ $(LAPACK) $(HDF5LIB)

build/SSLB.b: build/apps/SSLB_boson.o $(DP_OBJ)
	$(CC) $^ -o $@ $(LAPACK) $(HDF5LIB)

build/SSOP.b: build/apps/SSOP_boson.o $(OP_OBJ)
	$(CC) $^ -o $@ $(LAPACK) $(HDF5LIB)

build/SSt.b: build/apps/SSt_boson.o $(SS_OBJ)
	$(CC) $^ -o $@ $(LAPACK) $(HDF5LIB)

build/TIsing: build/apps/1D_TIsing.o $(OBJ)
	$(CC) $^ -o $@ $(LAPACK) $(HDF5LIB)

build/Benzene: build/apps/Benzene.o $(OBJ)
	$(CC) $^ -o $@ $(LAPACK) $(HDF5LIB)

build/CreutzLadder.XXZ: build/apps/CreutzLadder_XXZ.o $(OBJ)
	$(CC) $^ -o $@ $(LAPACK) $(HDF5LIB)

build/xas.f: build/apps/XAS_fermion.o $(OBJ)
	$(CC) $^ -o $@ $(LAPACK) $(HDF5LIB)

build/loop.f: build/apps/LoopFermion.o $(PE_OBJ)
	$(CC) $^ -o $@ $(LAPACK) $(HDF5LIB)

build/plex: build/apps/FermionBosonMix.o $(OBJ)
	$(CC) $^ -o $@ $(LAPACK) $(HDF5LIB)

build/apps/FermionBosonMixMPI.o: apps/FermionBosonMix.cpp
	$(MPICC) -DMPIPARALLEL $(INCLUDES) -c $< -o $@

build/plex.mpi: build/apps/FermionBosonMixMPI.o $(OBJ)
	$(MPICC) -DMPIPARALLEL $^ -o $@ $(LAPACK) $(HDF5LIB)

checkdirs: $(BUILD_DIR)

$(BUILD_DIR):
	@mkdir -p $@

clean:
	@rm -rf $(BUILD_DIR) build/*.o

$(foreach bdir,$(BUILD_DIR),$(eval $(call make-goal,$(bdir))))
